/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DataMsg'
 * message type.
 */

public class DataMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 19;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 2;

    /** Create a new DataMsg of size 19. */
    public DataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DataMsg of the given data_length. */
    public DataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg with the given data_length
     * and base offset.
     */
    public DataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg using the given byte array
     * as backing store.
     */
    public DataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg embedded in the given message
     * at the given base offset.
     */
    public DataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg embedded in the given message
     * at the given base offset and length.
     */
    public DataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DataMsg> \n";
      try {
        s += "  [nodeID=0x"+Long.toHexString(get_nodeID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [min=0x"+Long.toHexString(get_min())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [max=0x"+Long.toHexString(get_max())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sampleCnt=0x"+Long.toHexString(get_sampleCnt())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [micSampPer=0x"+Long.toHexString(get_micSampPer())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [micSampNum=0x"+Long.toHexString(get_micSampNum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [average=0x"+Long.toHexString(get_average())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [energy=0x"+Long.toHexString(get_energy())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeID
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeID' is signed (false).
     */
    public static boolean isSigned_nodeID() {
        return false;
    }

    /**
     * Return whether the field 'nodeID' is an array (false).
     */
    public static boolean isArray_nodeID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeID'
     */
    public static int offset_nodeID() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeID'
     */
    public static int offsetBits_nodeID() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'nodeID'
     */
    public short get_nodeID() {
        return (short)getUIntBEElement(offsetBits_nodeID(), 8);
    }

    /**
     * Set the value of the field 'nodeID'
     */
    public void set_nodeID(short value) {
        setUIntBEElement(offsetBits_nodeID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeID'
     */
    public static int size_nodeID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeID'
     */
    public static int sizeBits_nodeID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: min
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'min' is signed (false).
     */
    public static boolean isSigned_min() {
        return false;
    }

    /**
     * Return whether the field 'min' is an array (false).
     */
    public static boolean isArray_min() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'min'
     */
    public static int offset_min() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'min'
     */
    public static int offsetBits_min() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'min'
     */
    public int get_min() {
        return (int)getUIntBEElement(offsetBits_min(), 16);
    }

    /**
     * Set the value of the field 'min'
     */
    public void set_min(int value) {
        setUIntBEElement(offsetBits_min(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'min'
     */
    public static int size_min() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'min'
     */
    public static int sizeBits_min() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: max
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'max' is signed (false).
     */
    public static boolean isSigned_max() {
        return false;
    }

    /**
     * Return whether the field 'max' is an array (false).
     */
    public static boolean isArray_max() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'max'
     */
    public static int offset_max() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'max'
     */
    public static int offsetBits_max() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'max'
     */
    public int get_max() {
        return (int)getUIntBEElement(offsetBits_max(), 16);
    }

    /**
     * Set the value of the field 'max'
     */
    public void set_max(int value) {
        setUIntBEElement(offsetBits_max(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'max'
     */
    public static int size_max() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'max'
     */
    public static int sizeBits_max() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sampleCnt
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sampleCnt' is signed (false).
     */
    public static boolean isSigned_sampleCnt() {
        return false;
    }

    /**
     * Return whether the field 'sampleCnt' is an array (false).
     */
    public static boolean isArray_sampleCnt() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sampleCnt'
     */
    public static int offset_sampleCnt() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sampleCnt'
     */
    public static int offsetBits_sampleCnt() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'sampleCnt'
     */
    public int get_sampleCnt() {
        return (int)getUIntBEElement(offsetBits_sampleCnt(), 16);
    }

    /**
     * Set the value of the field 'sampleCnt'
     */
    public void set_sampleCnt(int value) {
        setUIntBEElement(offsetBits_sampleCnt(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sampleCnt'
     */
    public static int size_sampleCnt() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sampleCnt'
     */
    public static int sizeBits_sampleCnt() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: micSampPer
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'micSampPer' is signed (false).
     */
    public static boolean isSigned_micSampPer() {
        return false;
    }

    /**
     * Return whether the field 'micSampPer' is an array (false).
     */
    public static boolean isArray_micSampPer() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'micSampPer'
     */
    public static int offset_micSampPer() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'micSampPer'
     */
    public static int offsetBits_micSampPer() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'micSampPer'
     */
    public int get_micSampPer() {
        return (int)getUIntBEElement(offsetBits_micSampPer(), 16);
    }

    /**
     * Set the value of the field 'micSampPer'
     */
    public void set_micSampPer(int value) {
        setUIntBEElement(offsetBits_micSampPer(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'micSampPer'
     */
    public static int size_micSampPer() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'micSampPer'
     */
    public static int sizeBits_micSampPer() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: micSampNum
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'micSampNum' is signed (false).
     */
    public static boolean isSigned_micSampNum() {
        return false;
    }

    /**
     * Return whether the field 'micSampNum' is an array (false).
     */
    public static boolean isArray_micSampNum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'micSampNum'
     */
    public static int offset_micSampNum() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'micSampNum'
     */
    public static int offsetBits_micSampNum() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'micSampNum'
     */
    public int get_micSampNum() {
        return (int)getUIntBEElement(offsetBits_micSampNum(), 16);
    }

    /**
     * Set the value of the field 'micSampNum'
     */
    public void set_micSampNum(int value) {
        setUIntBEElement(offsetBits_micSampNum(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'micSampNum'
     */
    public static int size_micSampNum() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'micSampNum'
     */
    public static int sizeBits_micSampNum() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: average
    //   Field type: long, unsigned
    //   Offset (bits): 88
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'average' is signed (false).
     */
    public static boolean isSigned_average() {
        return false;
    }

    /**
     * Return whether the field 'average' is an array (false).
     */
    public static boolean isArray_average() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'average'
     */
    public static int offset_average() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'average'
     */
    public static int offsetBits_average() {
        return 88;
    }

    /**
     * Return the value (as a long) of the field 'average'
     */
    public long get_average() {
        return (long)getUIntBEElement(offsetBits_average(), 32);
    }

    /**
     * Set the value of the field 'average'
     */
    public void set_average(long value) {
        setUIntBEElement(offsetBits_average(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'average'
     */
    public static int size_average() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'average'
     */
    public static int sizeBits_average() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: energy
    //   Field type: long, unsigned
    //   Offset (bits): 120
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'energy' is signed (false).
     */
    public static boolean isSigned_energy() {
        return false;
    }

    /**
     * Return whether the field 'energy' is an array (false).
     */
    public static boolean isArray_energy() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'energy'
     */
    public static int offset_energy() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'energy'
     */
    public static int offsetBits_energy() {
        return 120;
    }

    /**
     * Return the value (as a long) of the field 'energy'
     */
    public long get_energy() {
        return (long)getUIntBEElement(offsetBits_energy(), 32);
    }

    /**
     * Set the value of the field 'energy'
     */
    public void set_energy(long value) {
        setUIntBEElement(offsetBits_energy(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'energy'
     */
    public static int size_energy() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'energy'
     */
    public static int sizeBits_energy() {
        return 32;
    }

}
