/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DataMsg'
 * message type.
 */

public class DataMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 26;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 2;

    /** Create a new DataMsg of size 26. */
    public DataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DataMsg of the given data_length. */
    public DataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg with the given data_length
     * and base offset.
     */
    public DataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg using the given byte array
     * as backing store.
     */
    public DataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg embedded in the given message
     * at the given base offset.
     */
    public DataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataMsg embedded in the given message
     * at the given base offset and length.
     */
    public DataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DataMsg> \n";
      try {
        s += "  [senderNodeID=0x"+Long.toHexString(get_senderNodeID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [receiverNodeID=0x"+Long.toHexString(get_receiverNodeID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sampleCnt=0x"+Long.toHexString(get_sampleCnt())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rssiMin=0x"+Long.toHexString(get_rssiMin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rssiAver=0x"+Long.toHexString(get_rssiAver())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rssiEnergy=0x"+Long.toHexString(get_rssiEnergy())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rssiMax=0x"+Long.toHexString(get_rssiMax())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lqiMin=0x"+Long.toHexString(get_lqiMin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lqiAver=0x"+Long.toHexString(get_lqiAver())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lqiEnergy=0x"+Long.toHexString(get_lqiEnergy())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lqiMax=0x"+Long.toHexString(get_lqiMax())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: senderNodeID
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'senderNodeID' is signed (false).
     */
    public static boolean isSigned_senderNodeID() {
        return false;
    }

    /**
     * Return whether the field 'senderNodeID' is an array (false).
     */
    public static boolean isArray_senderNodeID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'senderNodeID'
     */
    public static int offset_senderNodeID() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'senderNodeID'
     */
    public static int offsetBits_senderNodeID() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'senderNodeID'
     */
    public short get_senderNodeID() {
        return (short)getUIntBEElement(offsetBits_senderNodeID(), 8);
    }

    /**
     * Set the value of the field 'senderNodeID'
     */
    public void set_senderNodeID(short value) {
        setUIntBEElement(offsetBits_senderNodeID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'senderNodeID'
     */
    public static int size_senderNodeID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'senderNodeID'
     */
    public static int sizeBits_senderNodeID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: receiverNodeID
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'receiverNodeID' is signed (false).
     */
    public static boolean isSigned_receiverNodeID() {
        return false;
    }

    /**
     * Return whether the field 'receiverNodeID' is an array (false).
     */
    public static boolean isArray_receiverNodeID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'receiverNodeID'
     */
    public static int offset_receiverNodeID() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'receiverNodeID'
     */
    public static int offsetBits_receiverNodeID() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'receiverNodeID'
     */
    public short get_receiverNodeID() {
        return (short)getUIntBEElement(offsetBits_receiverNodeID(), 8);
    }

    /**
     * Set the value of the field 'receiverNodeID'
     */
    public void set_receiverNodeID(short value) {
        setUIntBEElement(offsetBits_receiverNodeID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'receiverNodeID'
     */
    public static int size_receiverNodeID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'receiverNodeID'
     */
    public static int sizeBits_receiverNodeID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sampleCnt
    //   Field type: long, unsigned
    //   Offset (bits): 16
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sampleCnt' is signed (false).
     */
    public static boolean isSigned_sampleCnt() {
        return false;
    }

    /**
     * Return whether the field 'sampleCnt' is an array (false).
     */
    public static boolean isArray_sampleCnt() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sampleCnt'
     */
    public static int offset_sampleCnt() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sampleCnt'
     */
    public static int offsetBits_sampleCnt() {
        return 16;
    }

    /**
     * Return the value (as a long) of the field 'sampleCnt'
     */
    public long get_sampleCnt() {
        return (long)getUIntBEElement(offsetBits_sampleCnt(), 32);
    }

    /**
     * Set the value of the field 'sampleCnt'
     */
    public void set_sampleCnt(long value) {
        setUIntBEElement(offsetBits_sampleCnt(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'sampleCnt'
     */
    public static int size_sampleCnt() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sampleCnt'
     */
    public static int sizeBits_sampleCnt() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssiMin
    //   Field type: byte, unsigned
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssiMin' is signed (false).
     */
    public static boolean isSigned_rssiMin() {
        return false;
    }

    /**
     * Return whether the field 'rssiMin' is an array (false).
     */
    public static boolean isArray_rssiMin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssiMin'
     */
    public static int offset_rssiMin() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssiMin'
     */
    public static int offsetBits_rssiMin() {
        return 48;
    }

    /**
     * Return the value (as a byte) of the field 'rssiMin'
     */
    public byte get_rssiMin() {
        return (byte)getSIntBEElement(offsetBits_rssiMin(), 8);
    }

    /**
     * Set the value of the field 'rssiMin'
     */
    public void set_rssiMin(byte value) {
        setSIntBEElement(offsetBits_rssiMin(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssiMin'
     */
    public static int size_rssiMin() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssiMin'
     */
    public static int sizeBits_rssiMin() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssiAver
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssiAver' is signed (false).
     */
    public static boolean isSigned_rssiAver() {
        return false;
    }

    /**
     * Return whether the field 'rssiAver' is an array (false).
     */
    public static boolean isArray_rssiAver() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssiAver'
     */
    public static int offset_rssiAver() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssiAver'
     */
    public static int offsetBits_rssiAver() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'rssiAver'
     */
    public int get_rssiAver() {
        return (int)getSIntBEElement(offsetBits_rssiAver(), 32);
    }

    /**
     * Set the value of the field 'rssiAver'
     */
    public void set_rssiAver(int value) {
        setSIntBEElement(offsetBits_rssiAver(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssiAver'
     */
    public static int size_rssiAver() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssiAver'
     */
    public static int sizeBits_rssiAver() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssiEnergy
    //   Field type: int, unsigned
    //   Offset (bits): 88
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssiEnergy' is signed (false).
     */
    public static boolean isSigned_rssiEnergy() {
        return false;
    }

    /**
     * Return whether the field 'rssiEnergy' is an array (false).
     */
    public static boolean isArray_rssiEnergy() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssiEnergy'
     */
    public static int offset_rssiEnergy() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssiEnergy'
     */
    public static int offsetBits_rssiEnergy() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'rssiEnergy'
     */
    public int get_rssiEnergy() {
        return (int)getSIntBEElement(offsetBits_rssiEnergy(), 32);
    }

    /**
     * Set the value of the field 'rssiEnergy'
     */
    public void set_rssiEnergy(int value) {
        setSIntBEElement(offsetBits_rssiEnergy(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssiEnergy'
     */
    public static int size_rssiEnergy() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssiEnergy'
     */
    public static int sizeBits_rssiEnergy() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssiMax
    //   Field type: byte, unsigned
    //   Offset (bits): 120
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssiMax' is signed (false).
     */
    public static boolean isSigned_rssiMax() {
        return false;
    }

    /**
     * Return whether the field 'rssiMax' is an array (false).
     */
    public static boolean isArray_rssiMax() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssiMax'
     */
    public static int offset_rssiMax() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssiMax'
     */
    public static int offsetBits_rssiMax() {
        return 120;
    }

    /**
     * Return the value (as a byte) of the field 'rssiMax'
     */
    public byte get_rssiMax() {
        return (byte)getSIntBEElement(offsetBits_rssiMax(), 8);
    }

    /**
     * Set the value of the field 'rssiMax'
     */
    public void set_rssiMax(byte value) {
        setSIntBEElement(offsetBits_rssiMax(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssiMax'
     */
    public static int size_rssiMax() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssiMax'
     */
    public static int sizeBits_rssiMax() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lqiMin
    //   Field type: short, unsigned
    //   Offset (bits): 128
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lqiMin' is signed (false).
     */
    public static boolean isSigned_lqiMin() {
        return false;
    }

    /**
     * Return whether the field 'lqiMin' is an array (false).
     */
    public static boolean isArray_lqiMin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lqiMin'
     */
    public static int offset_lqiMin() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lqiMin'
     */
    public static int offsetBits_lqiMin() {
        return 128;
    }

    /**
     * Return the value (as a short) of the field 'lqiMin'
     */
    public short get_lqiMin() {
        return (short)getUIntBEElement(offsetBits_lqiMin(), 8);
    }

    /**
     * Set the value of the field 'lqiMin'
     */
    public void set_lqiMin(short value) {
        setUIntBEElement(offsetBits_lqiMin(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'lqiMin'
     */
    public static int size_lqiMin() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lqiMin'
     */
    public static int sizeBits_lqiMin() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lqiAver
    //   Field type: long, unsigned
    //   Offset (bits): 136
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lqiAver' is signed (false).
     */
    public static boolean isSigned_lqiAver() {
        return false;
    }

    /**
     * Return whether the field 'lqiAver' is an array (false).
     */
    public static boolean isArray_lqiAver() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lqiAver'
     */
    public static int offset_lqiAver() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lqiAver'
     */
    public static int offsetBits_lqiAver() {
        return 136;
    }

    /**
     * Return the value (as a long) of the field 'lqiAver'
     */
    public long get_lqiAver() {
        return (long)getUIntBEElement(offsetBits_lqiAver(), 32);
    }

    /**
     * Set the value of the field 'lqiAver'
     */
    public void set_lqiAver(long value) {
        setUIntBEElement(offsetBits_lqiAver(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'lqiAver'
     */
    public static int size_lqiAver() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lqiAver'
     */
    public static int sizeBits_lqiAver() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lqiEnergy
    //   Field type: long, unsigned
    //   Offset (bits): 168
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lqiEnergy' is signed (false).
     */
    public static boolean isSigned_lqiEnergy() {
        return false;
    }

    /**
     * Return whether the field 'lqiEnergy' is an array (false).
     */
    public static boolean isArray_lqiEnergy() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lqiEnergy'
     */
    public static int offset_lqiEnergy() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lqiEnergy'
     */
    public static int offsetBits_lqiEnergy() {
        return 168;
    }

    /**
     * Return the value (as a long) of the field 'lqiEnergy'
     */
    public long get_lqiEnergy() {
        return (long)getUIntBEElement(offsetBits_lqiEnergy(), 32);
    }

    /**
     * Set the value of the field 'lqiEnergy'
     */
    public void set_lqiEnergy(long value) {
        setUIntBEElement(offsetBits_lqiEnergy(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'lqiEnergy'
     */
    public static int size_lqiEnergy() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lqiEnergy'
     */
    public static int sizeBits_lqiEnergy() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lqiMax
    //   Field type: short, unsigned
    //   Offset (bits): 200
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lqiMax' is signed (false).
     */
    public static boolean isSigned_lqiMax() {
        return false;
    }

    /**
     * Return whether the field 'lqiMax' is an array (false).
     */
    public static boolean isArray_lqiMax() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lqiMax'
     */
    public static int offset_lqiMax() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lqiMax'
     */
    public static int offsetBits_lqiMax() {
        return 200;
    }

    /**
     * Return the value (as a short) of the field 'lqiMax'
     */
    public short get_lqiMax() {
        return (short)getUIntBEElement(offsetBits_lqiMax(), 8);
    }

    /**
     * Set the value of the field 'lqiMax'
     */
    public void set_lqiMax(short value) {
        setUIntBEElement(offsetBits_lqiMax(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'lqiMax'
     */
    public static int size_lqiMax() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lqiMax'
     */
    public static int sizeBits_lqiMax() {
        return 8;
    }

}
