RadioTest application README

1. Authors/Contacts:
   -----------------
   veresskrisztian@gmail.com (Krisztian Veress, SZTE University, Szeged, Hungary )
	
2. Description:
   ------------
   This application's main goal is to provide a universal framework that is able to 
   conduct reproducible tests in order to analyze and measure the radiocommunication
   generated by the applied testcase.
   
   The focus is on the radiocommunication, hence testcases are given by communication
   links in a directed graph representation. For specifying testcases, see
   RadioTestCases.h.
   
3. TinyOS network requirements:
   ----------------------------
   To use the framework, one needs 
    - a BaseStation mote with TOS_NODE_ID = 0.
    - multiple 'test motes' with TOS_NODE_IDs 1,2,3, ... based on the required mote count of
      the testcase to be run
   
   One should take note that mote's channel is set to the same value (11), so when using
   different radio chips, compile time definitions such as
    -DRF230_DEF_CHANNEL = 11, and
    -DCC2420_DEF_CHANNLE = 11, ...
   
   are preset in the Makefile. Of course, it is allowed to change, but keep them equal.
   
4. Programming the motes:
   ----------------------
   To program the 'test motes', simply execute the make command with appropriate options.
   Examples:
    - iris mote connected to MIB510 programmer on the first USB slot, assign TOS_NODE_ID=1 
    UNIX   : make iris install,1 mib510,/dev/ttyUSB0
    Windows: make iris install,1 mib510,COM1
  
    - telosa/telosb motes, assign TOS_NODE_ID=2 and 3
             make telosa install,2
             make telosb install,3
    - ...
    
5. Compiling the PC program:
   -------------------------
    The application comes shipped with a PC-based control program. The program depends on the
    tinyos.jar (TinyOS Java components) and libcommons-cli.jar (Apache CLI components) files, 
    so first set the CLASSPATH variable to contain at least these files, and the RadioTest
    application's directory.
    Example:
      export CLASSPATH=/usr/share/java/commons-cli.jar:/opt/tinyos-2.x/support/sdk/java/tinyos.jar:.
      
    After that, simply execute
      javac *.java
    
    In order to successfully compile, the code needs mig-generated classes, so make sure you
    have made a 'make <target>' for any target before compiling Java sources. Otherwise you 
    get errors like:
    
    RadioTestController.java:72: cannot find symbol
    symbol  : class ResponseMsgT
    location: class RadioTestController
        mif.registerListener(new ResponseMsgT(),this);
        
       
    Then, executing
      java RadioTest --help
    will give you details on how this application can be used.
    
6. Using the application:
   ----------------------
   To use the application, power-on all programmed 'test-motes', plug in the BaseStation mote
   to your PC, and set the MOTECOM variable to point to the BaseStation mote.
   Examples:
    - iris BaseStation mote connected to MIB510 programmer on the first USB slot
      export MOTECOM=serial@/dev/ttyUSB1:iris
    - telosb BaseStation mote connected on the second USB slot
      export MOTECOM=serial@/dev/ttyUSB2:telosb
      
   Then, execute the following:
     java RadioTest -p 0
   which will eventually execute the 0th testcase defined in RadioTestCases.h, and print the
   results on your screen. For more options, see 
     java RadioTest --help
      
7. Status indicators on 'test-motes':
   ----------------------------------
   The code is written in a way so that the status of each 'test mote' can be tracked during the 
   whole process. 
    1. LED 1       on : mote is reset, standing by, waits for running a testcase.
    2. LED 2       on : mote received configuration, waits for handshake with the PC program
    3. LED 1,LED 2 on : mote successfully configured, handshake is done
    4. LED 3       on : testcase is currently running
    5. LED 3,LED 1 on : mote is in so-called 'lastchance' state -- being a pre-stop phase of the testcase
    6. LED 3,LED 2 on : mote finished the testcase, statistics are ready
    7. LED 3,LED 2 on : mote is uploading values to PC
    
   Motes should not be in states 2,3 and 5 for LONG TIME, if it happens, you can reset them by invoking
     java RadioTest -r
   ( Note that this will reset ALL motes! )
   
8. Known limitations:
   ----------------
   - We plan to provide a YAML-formatted configuration file for describing testcases, rather than messing
     with the RadioTestCases.h file.
   - Configuration and data uploading is done in a one-hop manner, so 'test-motes' must be in the radio
     reception range of the BaseStation. We plan to support multi-hop configurations and uploadings in the
     future.
   
   
   
