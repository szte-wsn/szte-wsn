/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'Uint8Msg'
 * message type.
 */

public class Uint8Msg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 17;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 3;

    /** Create a new Uint8Msg of size 17. */
    public Uint8Msg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new Uint8Msg of the given data_length. */
    public Uint8Msg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Uint8Msg with the given data_length
     * and base offset.
     */
    public Uint8Msg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Uint8Msg using the given byte array
     * as backing store.
     */
    public Uint8Msg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Uint8Msg using the given byte array
     * as backing store, with the given base offset.
     */
    public Uint8Msg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Uint8Msg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public Uint8Msg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Uint8Msg embedded in the given message
     * at the given base offset.
     */
    public Uint8Msg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new Uint8Msg embedded in the given message
     * at the given base offset and length.
     */
    public Uint8Msg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <Uint8Msg> \n";
      try {
        s += "  [dataType=0x"+Long.toHexString(get_dataType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [senderNodeID=0x"+Long.toHexString(get_senderNodeID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [receiverNodeID=0x"+Long.toHexString(get_receiverNodeID())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sampleCnt=0x"+Long.toHexString(get_sampleCnt())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [min=0x"+Long.toHexString(get_min())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [max=0x"+Long.toHexString(get_max())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sum_a=0x"+Long.toHexString(get_sum_a())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sum_e=0x"+Long.toHexString(get_sum_e())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dataType
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dataType' is signed (false).
     */
    public static boolean isSigned_dataType() {
        return false;
    }

    /**
     * Return whether the field 'dataType' is an array (false).
     */
    public static boolean isArray_dataType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dataType'
     */
    public static int offset_dataType() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dataType'
     */
    public static int offsetBits_dataType() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'dataType'
     */
    public short get_dataType() {
        return (short)getUIntBEElement(offsetBits_dataType(), 8);
    }

    /**
     * Set the value of the field 'dataType'
     */
    public void set_dataType(short value) {
        setUIntBEElement(offsetBits_dataType(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'dataType'
     */
    public static int size_dataType() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dataType'
     */
    public static int sizeBits_dataType() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: senderNodeID
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'senderNodeID' is signed (false).
     */
    public static boolean isSigned_senderNodeID() {
        return false;
    }

    /**
     * Return whether the field 'senderNodeID' is an array (false).
     */
    public static boolean isArray_senderNodeID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'senderNodeID'
     */
    public static int offset_senderNodeID() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'senderNodeID'
     */
    public static int offsetBits_senderNodeID() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'senderNodeID'
     */
    public short get_senderNodeID() {
        return (short)getUIntBEElement(offsetBits_senderNodeID(), 8);
    }

    /**
     * Set the value of the field 'senderNodeID'
     */
    public void set_senderNodeID(short value) {
        setUIntBEElement(offsetBits_senderNodeID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'senderNodeID'
     */
    public static int size_senderNodeID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'senderNodeID'
     */
    public static int sizeBits_senderNodeID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: receiverNodeID
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'receiverNodeID' is signed (false).
     */
    public static boolean isSigned_receiverNodeID() {
        return false;
    }

    /**
     * Return whether the field 'receiverNodeID' is an array (false).
     */
    public static boolean isArray_receiverNodeID() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'receiverNodeID'
     */
    public static int offset_receiverNodeID() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'receiverNodeID'
     */
    public static int offsetBits_receiverNodeID() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'receiverNodeID'
     */
    public short get_receiverNodeID() {
        return (short)getUIntBEElement(offsetBits_receiverNodeID(), 8);
    }

    /**
     * Set the value of the field 'receiverNodeID'
     */
    public void set_receiverNodeID(short value) {
        setUIntBEElement(offsetBits_receiverNodeID(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'receiverNodeID'
     */
    public static int size_receiverNodeID() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'receiverNodeID'
     */
    public static int sizeBits_receiverNodeID() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sampleCnt
    //   Field type: long, unsigned
    //   Offset (bits): 24
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sampleCnt' is signed (false).
     */
    public static boolean isSigned_sampleCnt() {
        return false;
    }

    /**
     * Return whether the field 'sampleCnt' is an array (false).
     */
    public static boolean isArray_sampleCnt() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sampleCnt'
     */
    public static int offset_sampleCnt() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sampleCnt'
     */
    public static int offsetBits_sampleCnt() {
        return 24;
    }

    /**
     * Return the value (as a long) of the field 'sampleCnt'
     */
    public long get_sampleCnt() {
        return (long)getUIntBEElement(offsetBits_sampleCnt(), 32);
    }

    /**
     * Set the value of the field 'sampleCnt'
     */
    public void set_sampleCnt(long value) {
        setUIntBEElement(offsetBits_sampleCnt(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'sampleCnt'
     */
    public static int size_sampleCnt() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sampleCnt'
     */
    public static int sizeBits_sampleCnt() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: min
    //   Field type: short, unsigned
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'min' is signed (false).
     */
    public static boolean isSigned_min() {
        return false;
    }

    /**
     * Return whether the field 'min' is an array (false).
     */
    public static boolean isArray_min() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'min'
     */
    public static int offset_min() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'min'
     */
    public static int offsetBits_min() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'min'
     */
    public short get_min() {
        return (short)getUIntBEElement(offsetBits_min(), 8);
    }

    /**
     * Set the value of the field 'min'
     */
    public void set_min(short value) {
        setUIntBEElement(offsetBits_min(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'min'
     */
    public static int size_min() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'min'
     */
    public static int sizeBits_min() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: max
    //   Field type: short, unsigned
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'max' is signed (false).
     */
    public static boolean isSigned_max() {
        return false;
    }

    /**
     * Return whether the field 'max' is an array (false).
     */
    public static boolean isArray_max() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'max'
     */
    public static int offset_max() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'max'
     */
    public static int offsetBits_max() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'max'
     */
    public short get_max() {
        return (short)getUIntBEElement(offsetBits_max(), 8);
    }

    /**
     * Set the value of the field 'max'
     */
    public void set_max(short value) {
        setUIntBEElement(offsetBits_max(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'max'
     */
    public static int size_max() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'max'
     */
    public static int sizeBits_max() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sum_a
    //   Field type: long, unsigned
    //   Offset (bits): 72
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sum_a' is signed (false).
     */
    public static boolean isSigned_sum_a() {
        return false;
    }

    /**
     * Return whether the field 'sum_a' is an array (false).
     */
    public static boolean isArray_sum_a() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sum_a'
     */
    public static int offset_sum_a() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sum_a'
     */
    public static int offsetBits_sum_a() {
        return 72;
    }

    /**
     * Return the value (as a long) of the field 'sum_a'
     */
    public long get_sum_a() {
        return (long)getUIntBEElement(offsetBits_sum_a(), 32);
    }

    /**
     * Set the value of the field 'sum_a'
     */
    public void set_sum_a(long value) {
        setUIntBEElement(offsetBits_sum_a(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'sum_a'
     */
    public static int size_sum_a() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sum_a'
     */
    public static int sizeBits_sum_a() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sum_e
    //   Field type: long, unsigned
    //   Offset (bits): 104
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sum_e' is signed (false).
     */
    public static boolean isSigned_sum_e() {
        return false;
    }

    /**
     * Return whether the field 'sum_e' is an array (false).
     */
    public static boolean isArray_sum_e() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sum_e'
     */
    public static int offset_sum_e() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sum_e'
     */
    public static int offsetBits_sum_e() {
        return 104;
    }

    /**
     * Return the value (as a long) of the field 'sum_e'
     */
    public long get_sum_e() {
        return (long)getUIntBEElement(offsetBits_sum_e(), 32);
    }

    /**
     * Set the value of the field 'sum_e'
     */
    public void set_sum_e(long value) {
        setUIntBEElement(offsetBits_sum_e(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'sum_e'
     */
    public static int size_sum_e() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sum_e'
     */
    public static int sizeBits_sum_e() {
        return 32;
    }

}
